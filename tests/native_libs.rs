mod helper;
use genandroidmk_rs::makefile::Androidmk;
use helper::{cleanup_path, file_exists, get_by_name, mk_contains};

#[test]
fn native_libs_tests() {
    let mk = get_by_name("x86_multiple_so");
    let archs = vec!["x86"];
    let libs_extracted = mk.get_libraries();
    println!("libs extracted {:?}", libs_extracted);
    let libs_in_apk = vec!["libhello-jnicallback.so", "libtest_gen.so"];
    assert_eq!(mk.get_architectures(), archs);
    assert_eq!(libs_extracted, libs_in_apk);

    mk.gen_android_mk();
    let mk_so = "@lib/x86/libhello-jnicallback.so \\";
    let mk_so_test = "@lib/x86/libhello-jnicallback.so \\";
    assert_eq!(mk_contains(mk_so), true);
    assert_eq!(mk_contains(mk_so_test), true);
}

#[test]
fn native_lib_arm_v7a_tests() {
    let mk = get_by_name("armeabi-v7a");
    let archs = vec!["armeabi-v7a"];
    let libs_extracted = mk.get_libraries();
    println!("libs extracted {:?}", libs_extracted);
    let libs_in_apk = vec!["libhello-jnicallback.so"];
    assert_eq!(mk.get_architectures(), archs);
    assert_eq!(libs_extracted, libs_in_apk);

    mk.gen_android_mk();
    let mk_so = "@lib/armeabi-v7a/libhello-jnicallback.so ";
    assert_eq!(mk_contains(mk_so), true);
}

#[test]
fn extract_lib_proper_prefix() {
    let mut mk = get_by_name("armeabi-v7a");
    mk.set_extract_so(true);

    mk.gen_android_mk();
    let extracted_mk_so = "lib/armeabi-v7a/libhello-jnicallback.so ";
    assert_eq!(mk_contains(extracted_mk_so), true);
    let mk_so = "@lib/armeabi-v7a/libhello-jnicallback.so ";
    assert_eq!(mk_contains(mk_so), false);
}

#[test]
fn extract_lib_exists() {
    let mut mk = get_by_name("armeabi-v7a");
    mk.set_extract_so(true);
    mk.gen_android_mk();
    let lib_so = "lib/armeabi-v7a/libhello-jnicallback.so";

    assert_eq!(file_exists(lib_so), true);
    cleanup_path("lib/");
}

#[test]
fn extract_lib_does_not_exist() {
    // cleanup any leftover libs generated by tests
    cleanup_path("lib/");
    let mut mk = get_by_name("armeabi-v7a");
    mk.set_extract_so(false);
    mk.gen_android_mk();
    let lib_so = "lib/armeabi-v7a/libhello-jnicallback.so";

    assert_eq!(file_exists(lib_so), false);
    cleanup_path("lib/");
}

#[test]
fn extract_multiple_libs() {
    // cleanup any leftover libs generated by tests
    cleanup_path("lib/");

    // extract the libs
    let mk = Androidmk::new(
        format!("tests/data/{}.apk", "x86_multiple_so"), // input
        "",                                              // name
        "x86",                                           // default_architecture
        true,                                            // has default architecture
        "6.0",                                           // (un-used) os version
        false,                                           // pre-optimize dex files
        false,                                           // priviledged
        true,                                            // extract_so
        true,                                            // debug flag
        false,                                           // generate blueprint file
    );
    mk.gen_android_mk();
    let lib_so = "lib/x86/libhello-jnicallback.so";
    let lib_test_so = "lib/x86/libtest_gen.so";
    let lib_test_noop_so = "lib/x86/libtest_gen_nope.so";

    assert_eq!(file_exists(lib_so), true);
    assert_eq!(file_exists(lib_test_so), true);
    assert_eq!(file_exists(lib_test_noop_so), false);
    cleanup_path("lib/");
}

#[test]
fn extract_multiple_arch_libs() {
    cleanup_path("lib/");
    let mut mk = get_by_name("multipleArch");
    mk.set_extract_so(true);
    // mk.set_default_architecture("armeabi-v7a".into());
    // mk.set_has_default_architecture(true);
    mk.gen_android_mk();
    let libhello_jnicallback_arm64_v8a = "lib/arm64-v8a/libhello-jnicallback.so";
    let libhello_jnicallback_armeabi_v7a = "lib/armeabi-v7a/libhello-jnicallback.so";
    let libhello_jnicallback_x86 = "lib/x86/libhello-jnicallback.so";
    let libhello_jnicallback_x86_64 = "lib/x86_64/libhello-jnicallback.so";

    assert_eq!(mk_contains(libhello_jnicallback_arm64_v8a), true);
    assert_eq!(mk_contains(libhello_jnicallback_armeabi_v7a), true);
    assert_eq!(mk_contains(libhello_jnicallback_x86), true);
    assert_eq!(mk_contains(libhello_jnicallback_x86_64), true);
    cleanup_path("lib/");
}

#[test]
fn non_extract_multiple_arch_libs() {
    cleanup_path("lib/");
    let mut mk = get_by_name("multipleArch");
    mk.set_extract_so(false);
    mk.gen_android_mk();
    let libhello_jnicallback_arm64_v8a = "@lib/arm64-v8a/libhello-jnicallback.so";
    let libhello_jnicallback_armeabi_v7a = "@lib/armeabi-v7a/libhello-jnicallback.so";
    let libhello_jnicallback_x86 = "@lib/x86/libhello-jnicallback.so";
    let libhello_jnicallback_x86_64 = "@lib/x86_64/libhello-jnicallback.so";

    assert_eq!(mk_contains(libhello_jnicallback_arm64_v8a), true);
    assert_eq!(mk_contains(libhello_jnicallback_armeabi_v7a), true);
    assert_eq!(mk_contains(libhello_jnicallback_x86), true);
    assert_eq!(mk_contains(libhello_jnicallback_x86_64), true);
    cleanup_path("lib/");
}

#[test]
fn extract_single_arch_libs() {
    cleanup_path("lib/");
    let mut mk = Androidmk::new(
        format!("tests/data/x86_multiple_so.apk"), // input
        "x86_multiple_so",                         // name
        "x86",                                     // default_architecture
        true,                                      // has default architecture
        "6.0",                                     // (un-used) os version
        false,                                     // pre-optimize dex files
        false,                                     // priviledged
        false,                                     // extract_so
        true,                                      // debug flag
        false,                                     // generate blueprint file
    );
    mk.set_extract_so(true);
    mk.set_has_default_architecture(true);
    mk.gen_android_mk();
    let libhello_jnicallback_arm64_v8a = "lib/armeabi-v7a/libhello-jnicallback.so";
    let libhello_jnicallback_armeabi_v7a = "lib/armeabi-v7a/libhello-jnicallback.so";
    let libhello_jnicallback_x86 = "lib/x86/libhello-jnicallback.so";
    let libhello_jnicallback_x86_64 = "lib/x86_64/libhello-jnicallback.so";

    assert_eq!(mk_contains(libhello_jnicallback_arm64_v8a), false);
    assert_eq!(mk_contains(libhello_jnicallback_armeabi_v7a), false);
    assert_eq!(mk_contains(libhello_jnicallback_x86), true);
    assert_eq!(mk_contains(libhello_jnicallback_x86_64), false);
    cleanup_path("lib/");
}
